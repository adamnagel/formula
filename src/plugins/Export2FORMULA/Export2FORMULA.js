/*globals define*/
/*jshint node:true, browser:true*/

/**
 * Generated by PluginGenerator 0.14.0 from webgme on Fri Feb 05 2016 08:50:41 GMT-0600 (CST).
 */

define([
    'plugin/PluginConfig',
    'plugin/PluginBase',
    'common/util/ejs',
    'plugin/Export2FORMULA/Export2FORMULA/Templates/Templates'
], function (
    PluginConfig,
    PluginBase,
    ejs,
    TEMPLATES) {
    'use strict';

    /**
     * Initializes a new instance of Export2FORMULA.
     * @class
     * @augments {PluginBase}
     * @classdesc This class represents the plugin Export2FORMULA.
     * @constructor
     */
    var Export2FORMULA = function () {
        // Call base class' constructor.
        PluginBase.call(this);
    };

    // Prototypal inheritance from PluginBase.
    Export2FORMULA.prototype = Object.create(PluginBase.prototype);
    Export2FORMULA.prototype.constructor = Export2FORMULA;

    /**
     * Gets the name of the Export2FORMULA.
     * @returns {string} The name of the plugin.
     * @public
     */
    Export2FORMULA.prototype.getName = function () {
        return 'Export2FORMULA';
    };

    /**
     * Gets the semantic version (semver.org) of the Export2FORMULA.
     * @returns {string} The version of the plugin.
     * @public
     */
    Export2FORMULA.prototype.getVersion = function () {
        return '0.1.0';
    };

    /**
     * Main function for the plugin to execute. This will perform the execution.
     * Notes:
     * - Always log with the provided logger.[error,warning,info,debug].
     * - Do NOT put any user interaction logic UI, etc. inside this method.
     * - callback always has to be called even if error happened.
     *
     * @param {function(string, plugin.PluginResult)} callback - the result callback
     */
    Export2FORMULA.prototype.main = function (callback) {
        // Use self to access core, project, result, logger etc from PluginBase.
        // These are all instantiated at this point.
        var self = this,
            nodeObject;


        // Using the logger.
        self.logger.debug('This is a debug message.');
        self.logger.info('This is an info message.');
        self.logger.warn('This is a warning message.');
        self.logger.error('This is an error message.');

        // Using the coreAPI to make changes.

        nodeObject = self.activeNode;

        self.core.setAttribute(nodeObject, 'name', 'My new obj');
        self.core.setRegistry(nodeObject, 'position', {x: 70, y: 70});


        // First transform ejs-files into js files (needed for client-side runs) -> run Templates/combine_templates.js.
        // See instructions in file. You must run this after any modifications to the ejs template.
        var templatePY = ejs.render(TEMPLATES['Python.py.ejs'], {a: 'a', b: 'b'});
        var templateFileName = 'generatedFiles/subDir/Python.py';
        var artifact = self.blobClient.createArtifact('templateFiles');
        artifact.addFile(templateFileName, templatePY, function (err) {
            if (err) {
                callback(err, self.result);
                return;
            }
            self.blobClient.saveAllArtifacts(function (err, hashes) {
                if (err) {
                    callback(err, self.result);
                    return;
                }
                // This will add a download hyperlink in the result-dialog.
                self.result.addArtifact(hashes[0]);
                // This will save the changes. If you don't want to save;
                // exclude self.save and call callback directly from this scope.
                self.save('Export2FORMULA updated model.', function (err) {
                    if (err) {
                        callback(err, self.result);
                        return;
                    }
                    self.result.setSuccess(true);
                    callback(null, self.result);
                });
            });
        });

    };

    return Export2FORMULA;
});