// Project name: <%= projectName %>
// Version     : <%= hash %>



<%

var escapeWebGmeName = function(s) {
      var result = s.replace(/(\s|\+)/g,"_");
      return result;
    },
    getFormulaNames = function(s){
      var result={};

      result.primitiveName = getPrimitiveName(s);
      result.unionName = getUnionName(s);

      return result;
    },
    getPrimitiveName = function(s){
      var result;

      result = escapeWebGmeName(s);
      result = "__".concat(result);

      return result;
    },
    getUnionName = function(s){
      return escapeWebGmeName(s);
    },
    createMetaDescendantsList = function(nodeData, allNodes){
      var results = {
        primitiveNames : {},
        unionNames : {}
      }, i, currentChildNode;

      for (prop in allNodes){
        currentChildNode = allNodes[prop];

        // Process just the metanodes with base (only node with base can be a descandant of an FCO)
        if (currentChildNode.base  == null || !currentChildNode.isMetaType) continue;
        currentBaseNode = allNodes[currentChildNode.base];


        if (currentBaseNode.id === nodeData.id){
          results.primitiveNames[getPrimitiveName(currentChildNode.name)] = true;
          results.unionNames[getUnionName(currentChildNode.name)] = true;
        }
      }

      return results;
    },

    formulaDomainName = "D".concat(escapeWebGmeName(projectName)),
    formulaModelName = "m",

    // Creates a union from the KEY values of the dictionary
    createFormulaUnion = function (dict, newUnionName){
      var result = '',
          hadKey = false;

      result = result.concat(newUnionName);
      result = result.concat(" ::= ");

      for (prop in dict){
        result = result.concat(prop);
        result = result.concat(" + ");
        hadKey = true;
      }

      if (!hadKey){
        return '';
      }

      result = result.slice(0,-3);

      return result;
    },

    dumpUnions = function(unions){
      var i;
      for (i = 0; i < unions.length; i += 1) {
        if (unions[i] === '') continue; %>
      <%= unions[i] %><%=formula.lineEnding%>
      <%}
    };

%>

[
  modules.DWebGMEExtended = "DWebGMEExtended at DWebGMEExtended.4ml",
  modules.<%=formulaDomainName%> = "<%=formulaDomainName%> at DSpecific.4ml"
]


// Transform to Domain Specific representation
transform T2DS (in1::DWebGMEExtended) returns (out1::<%=formulaDomainName%>)
{
<%
  var resolvedNames = [],
      keys = Object.keys(nodes),
      nodeData, resolvedNames,
      i, j,
      lhsName, baseName,
      srcId, dstId,
      resolvedSrcName, resolvedDstName;

  for (i = 0; i < keys.length; i += 1) {
    nodeData = nodes[keys[i]];
    resolvedNames[nodeData.id] = getFormulaNames(nodeData.name);
  }

  for (i = 0; i < keys.length; i += 1) {
    nodeData = nodes[keys[i]];
    if (nodeData.isMetaType) {
      lhsName = resolvedNames[nodeData.id].primitiveName;
      
      
      
      //baseName = resolvedNames[nodes[nodeData.id].base].primitiveName;
      
      
      // Connections
      if (nodeData.jsonMeta.pointers.src != undefined &&
          nodeData.jsonMeta.pointers.dst != undefined) {
          
          srcId = nodeData.jsonMeta.pointers.src.items[0];
          dstId = nodeData.jsonMeta.pointers.dst.items[0];
          resolvedSrcName = resolvedNames[srcId].unionName;
          resolvedDstName = resolvedNames[dstId].unionName;
          
          %>
          
          out1.<%=lhsName%>(id, NULL, NULL, NULL) :-
                                     in1.MetaType(node, metaNode)
                                   , node is in1.GMENode(id, _)
                                   , metaNode is in1.GMENode("<%=nodeData.id%>", _)
                                   , Base(node, baseNode)
                                   , IsMetaType(baseNode, <%=formula.true%>)
                                   , no GetSrcNode(_, node)
                                   , no GetDstNode(_, node)
                                   .
                                   
          out1.<%=lhsName%>(id, NULL, NULL, baseNode) :-
                                  in1.MetaType(node, metaNode)
                                , node is in1.GMENode(id, baseNodeId)
                                , metaNode is in1.GMENode("<%=nodeData.id%>", _)
                                , baseNode is out1.<%=lhsName%>(baseNodeId,_,_,_)
                                , no GetSrcNode(_, node)
                                , no GetDstNode(_, node)
                                .
                                
          out1.<%=lhsName%>(id, srcOut, dstOut, baseNode) :-
                                  in1.MetaType(node, metaNode)
                                , node is in1.GMENode(id, baseNodeId)
                                , metaNode is in1.GMENode("<%=nodeData.id%>", _)
                                , baseNode is out1.<%=lhsName%>(baseNodeId,_,_,_)
                                , GetSrcNode(srcIn, node)
                                , GetDstNode(dstIn, node)
                                , srcOut is out1.<%=resolvedSrcName%>
                                , srcOut.id = srcIn.id
                                , dstOut is out1.<%=resolvedDstName%>
                                , dstOut.id = dstIn.id
                                .
                               
          
          <%
          
      }
      else{
      %>
      
      

      out1.<%=lhsName%>(id, NULL) :- in1.MetaType(node, metaNode)
                                   , node is in1.GMENode(id, _)
                                   , metaNode is in1.GMENode("<%=nodeData.id%>", _)
                                   , Base(node, baseNode)
                                   , IsMetaType(baseNode, <%=formula.true%>)
                                   .
                                   
      out1.<%=lhsName%>(id, baseNode) :-
                                  in1.MetaType(node, metaNode)
                                , node is in1.GMENode(id, baseNodeId)
                                , metaNode is in1.GMENode("<%=nodeData.id%>", _)
                                , baseNode is out1.<%=lhsName%>(baseNodeId,_)
                                .
                                       
                                       
                                       
                                   
      //out1.<%=lhsName%>(id, NULL) :-   in1.MetaType(node, metaNode)
      //                               , node is in1.GMENode(id, _)
      //                               , metaNode is in1.GMENode("<%=nodeData.id%>", _)
      //                               , Base(node, baseNode)
      //                               , IsMetaType(baseNode, <%=formula.true%>)
      //                               .

      //traceNode(inInstance, out1.<%=lhsName%>(inId, outBase)),
      //out1.<%=lhsName%>(inId, outBase) :-  traceNode(in<%=lhsName%>, out<%=lhsName%>)
      //                               , inBase = in<%=lhsName%>
      //                               , outBase = out<%=lhsName%>
      //                               , out<%=lhsName%> is out1.<%=lhsName%>
      //                               , in1.Base(inInstance, inBase)
      //                               , inInstance is in1.GMENode(inId, _)
      //                               .
                                     
                                     
    <%}
    }
  }
%>
}
