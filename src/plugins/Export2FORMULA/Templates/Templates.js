/* Generated file based on ejs templates */
define([], function() {
    return {
    "model.4ml.ejs": "\r\n// Project name: <%= projectName %>\r\n// Version     : <%= hash %>\r\n\r\ndomain WebGME1\r\n{\r\n  NodeList ::= Node + {NIL}.\r\n  Node ::= new (ID: String, base: any NodeList).\r\n}\r\n\r\nmodel m of WebGME1\r\n{\r\n  <%\r\n  var nodeData, i, j, keys = Object.keys(nodes);\r\n  for (i = 0; i < keys.length; i += 1) {\r\n      nodeData = nodes[keys[i]];%>\r\n  // <%= nodeData.name %>\r\n  // <%= nodeData.id %>\r\n  // <%= nodeData.guid %>\r\n\r\n    <% if (nodeData.base) { %>\r\n      <%= nodeData.name %> is Node(\"<%= nodeData.id %>\", <%= nodes[nodeData.base].name %>).\r\n  // base is <%= nodes[nodeData.base].name %> <%= nodes[nodeData.base].id %> <%= nodes[nodeData.base].guid %>\r\n  // meta is <%= nodes[nodeData.meta].name %> <%= nodes[nodeData.meta].id %> <%= nodes[nodeData.meta].guid %>\r\n    <%} else {%>\r\n      // FCO\r\n      <%= nodeData.name %> is Node(\"<%= nodeData.id %>\", NIL).\r\n    <%}%>\r\n    <% if (nodeData.isAbstract) { %>\r\n      // this type is abstract\r\n    <% } else { %>\r\n      // this type is NOT abstract\r\n    <%}%>\r\n    <% if (nodeData.jsonMeta.children.items.length > 0) { %>\r\n      // valid children constraint: min: <%= nodeData.jsonMeta.children.min %> max: <%= nodeData.jsonMeta.children.max %>\r\n      <%\r\n      for (j = 0; j < nodeData.jsonMeta.children.items.length; j += 1) {%>\r\n        // valid child: <%= nodeData.jsonMeta.children.items[j] %> min: <%= nodeData.jsonMeta.children.minItems[j] %> max: <%= nodeData.jsonMeta.children.maxItems[j] %>\r\n      <%}%>\r\n    <%}%>\r\n    <%\r\n    var attribute, attributeNames = Object.keys(nodeData.jsonMeta.attributes);\r\n    for (j = 0; j < attributeNames.length; j += 1) {\r\n      attribute = nodeData.jsonMeta.attributes[attributeNames[j]];%>\r\n      // attribute: <%= attributeNames[j] %> <%= attribute.type %> <%= nodeData.attributes[attributeNames[j]] %>\r\n    <%}%>\r\n    <%\r\n    var pointer, pointerNames = Object.keys(nodeData.jsonMeta.pointers);\r\n    for (j = 0; j < pointerNames.length; j += 1) {\r\n      pointer = nodeData.jsonMeta.pointers[pointerNames[j]];%>\r\n      // pointer name: <%= pointerNames[j] %> type: <%= pointer.items %> <%= nodeData.pointers[pointerNames[j]] %>\r\n    <%}%>\r\n  <%}%>\r\n}\r\n\r\n\r\ndomain WebGME2\r\n{\r\n  NodeList ::= Node + {NIL}.\r\n  Node ::= new (ID: String, base: String).\r\n\r\n  NodeBase ::= (Node, Node).\r\n  NodeBase(child, base) :- child is Node(childId, baseId),\r\n                           base is Node(baseId, _).\r\n\r\n  Debug ::= new (Node, Node).\r\n}\r\n\r\ntransform T(in::WebGME2) returns(out::WebGME2)\r\n{\r\n  out.Debug(_(child), _(base)):- in.NodeBase(child, base).\r\n}\r\n\r\nmodel m2 of WebGME2\r\n{\r\n  <%\r\n  var nodeData, i, j, keys = Object.keys(nodes);\r\n  for (i = 0; i < keys.length; i += 1) {\r\n      nodeData = nodes[keys[i]];%>\r\n  // <%= nodeData.name %>\r\n  // <%= nodeData.id %>\r\n  // <%= nodeData.guid %>\r\n\r\n    <% if (nodeData.base) { %>\r\n      Node(\"<%= nodeData.id %>\", \"<%= nodes[nodeData.base].id %>\").\r\n  // base is <%= nodes[nodeData.base].name %> <%= nodes[nodeData.base].id %> <%= nodes[nodeData.base].guid %>\r\n  // meta is <%= nodes[nodeData.meta].name %> <%= nodes[nodeData.meta].id %> <%= nodes[nodeData.meta].guid %>\r\n    <%} else {%>\r\n      // FCO\r\n      Node(\"<%= nodeData.id %>\", \"\").\r\n    <%}%>\r\n    <% if (nodeData.isAbstract) { %>\r\n      // this type is abstract\r\n    <% } else { %>\r\n      // this type is NOT abstract\r\n    <%}%>\r\n    <% if (nodeData.jsonMeta.children.items.length > 0) { %>\r\n      // valid children constraint: min: <%= nodeData.jsonMeta.children.min %> max: <%= nodeData.jsonMeta.children.max %>\r\n      <%\r\n      for (j = 0; j < nodeData.jsonMeta.children.items.length; j += 1) {%>\r\n        // valid child: <%= nodeData.jsonMeta.children.items[j] %> min: <%= nodeData.jsonMeta.children.minItems[j] %> max: <%= nodeData.jsonMeta.children.maxItems[j] %>\r\n      <%}%>\r\n    <%}%>\r\n    <%\r\n    var attribute, attributeNames = Object.keys(nodeData.jsonMeta.attributes);\r\n    for (j = 0; j < attributeNames.length; j += 1) {\r\n      attribute = nodeData.jsonMeta.attributes[attributeNames[j]];%>\r\n      // attribute: <%= attributeNames[j] %> <%= attribute.type %> <%= nodeData.attributes[attributeNames[j]] %>\r\n    <%}%>\r\n    <%\r\n    var pointer, pointerNames = Object.keys(nodeData.jsonMeta.pointers);\r\n    for (j = 0; j < pointerNames.length; j += 1) {\r\n      pointer = nodeData.jsonMeta.pointers[pointerNames[j]];%>\r\n      // pointer name: <%= pointerNames[j] %> type: <%= pointer.items %> <%= nodeData.pointers[pointerNames[j]] %>\r\n    <%}%>\r\n  <%}%>\r\n}\r\n"
}});