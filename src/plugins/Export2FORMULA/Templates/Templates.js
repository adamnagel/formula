/* Generated file based on ejs templates */
define([], function() {
    return {
    "model.4ml.ejs": "// Project name: <%= projectName %>\n// Version     : <%= hash %>\n\ndomain WebGME\n{\n  ///////////////////////\n  // WebGME primitives //\n  ///////////////////////\n\n<% if (formulaVersion === 1) { %>\n  primitive GMENode      ::= (id: String, base: String).\n  primitive GMEAttribute ::= (name:String, value:String, nodeId:String).\n  primitive GMEParent    ::= (childId: String, parentId: String).\n  primitive GMEAbstract  ::= (nodeId:String, value:Boolean).\n  primitive GMEPointer   ::= (name:String, pointsToId:String, nodeId:String).\n\n  primitive Debug ::= (String, String).\n<% } else if (formulaVersion === 2) { %>\n  GMENode      ::= new (id: String, base: String).\n  GMEAttribute ::= new (name:String, value:String, nodeId:String).\n  GMEParent    ::= new (childId: String, parentId: String).\n  GMEAbstract  ::= new (nodeId:String, value:Boolean).\n  GMEPointer   ::= new (name:String, pointsToId:String, nodeId:String).\n\n  Debug ::= new (String, String).\n<% } %>\n\n  ////////////////\n  // WebGME API //\n  ////////////////\n\n  // Inheritance\n  Base ::= (child:GMENode, base:GMENode).\n  Base(child, base) :-   child is GMENode(childId, baseId)\n                       , base is GMENode(baseId, _)\n                       .\n\n  // InheritanceTree\n  InheritanceTree ::= (child: GMENode, parent: GMENode).\n  InheritanceTree(child, parent) :-   Base(child, parent)\n                                    ; InheritanceTree(child, x)\n                                    , InheritanceTree(x, parent)\n                                    .\n\n  // Containment - Contained relationship\n  Parent ::= (childNode: GMENode, parentNode: GMENode).\n  Parent(childNode, parentNode) :-   GMEParent(childId, parentId)\n                                   , childNode is GMENode(childId, _)\n                                   , parentNode is GMENode(parentId, _)\n                                   .\n\n  // ContainmentTree\n  ContainmentTree ::= (child: GMENode, parent:GMENode).\n  ContainmentTree(child, parent) :-   Parent(child, parent)\n                                    ; ContainmentTree(child, x)\n                                    , ContainmentTree(x, parent)\n                                    .\n\n  // Abstract\n  IsAbstract ::= (GMENode, Boolean).\n  IsAbstract(node, value) :-   GMEAbstract(nodeId, value)\n                             , node is GMENode(nodeId, _)\n                             .\n\n  // Connections\n  Connections ::= (GMENode).\n  Connections(n) :-   n is GMENode\n                    , Pointer(\"src\", _, n)\n                    , Pointer(\"dst\", _, n)\n                    .\n\n\n  // Attributes and Pointers\n  Attribute ::= (name:String, value:String, node:GMENode).\n  Attribute(name, value, node) :-   GMEAttribute(name, value, nodeId)\n                                  , node is GMENode(nodeId, _)\n                                  .\n\n  Pointer ::= (name:String, pointsTo:GMENode, node:GMENode).\n  Pointer(name, pointsTo, node) :-   GMEPointer(name, pointsToId, nodeId)\n                                   , node is GMENode(nodeId, _)\n                                   , pointsTo is GMENode(pointsToId, _)\n                                   .\n\n  // Basic functions: Getters\n  GetName ::= (name:String, node:GMENode).\n  GetName(name, node) :- Attribute(\"name\", name, node).\n\n  GetNode ::= (id:String, node:GMENode).\n  GetNode(id, node) :- node is GMENode(id, _).\n\n  GetSrcNode ::= (srcNode: GMENode, connectionNode: GMENode).\n  GetSrcNode(srcNode, connNode) :-   Connections(connNode)\n                                   , Pointer(\"src\", srcNode, connNode)\n                                   .\n\n  GetDstNode ::= (dstNode: GMENode, connectionNode: GMENode).\n  GetDstNode(dstNode, connNode) :-   Connections(connNode)\n                                   , Pointer(\"dst\", dstNode, connNode)\n                                   .\n}\n\n<% if (formulaVersion === 1) { %>\n  transform T from in1::WebGME to out1::WebGME\n  {\n    /*out1.Debug(cr_name, cr_id) :-\n                                  metaDfId = \"/1329246314/808227394/1194191410\"\n                                , appNode = in1.GMENode(\"/817592481/G/n\", _)\n\n                                , cr_name=\"credit_identity\"\n\n                                , metaDfNode = in1.GMENode(metaDfId, _)\n                                , in1.InheritanceTree(child, metaDfNode)\n                                , in1.ContainmentTree(child, appNode)\n                                , child is in1.GMENode(cr_id, _)\n                                , in1.Attribute(\"name\", cr_name, child)\n                                .*/\n    out1.Debug(\"abstract\", name) :- in1.IsAbstract(node, <%=formula.true%>), in1.GetName(name, node).\n  }\n<% } else if (formulaVersion === 2) { %>\n  transform T (in1::WebGME) returns (out1::WebGME)\n  {\n    out1.Debug(\"abstract\", name) :- in1.IsAbstract(node, <%=formula.true%>), in1.GetName(name, node).\n  }\n<% } %>\n\n\n\n\nmodel m of WebGME\n{\n  <%\n  var nodeData, i, j, keys = Object.keys(nodes);\n  for (i = 0; i < keys.length; i += 1) {\n      nodeData = nodes[keys[i]];%>\n  // <%= nodeData.name %>\n  // <%= nodeData.id %>\n  // <%= nodeData.guid %>\n\n    <% if (nodeData.base) { %>\n      GMENode(\"<%= nodeData.id %>\", \"<%= nodes[nodeData.base].id %>\")<%=formula.lineEnding%>\n  // base is <%= nodes[nodeData.base].name %> <%= nodes[nodeData.base].id %> <%= nodes[nodeData.base].guid %>\n  // meta is <%= nodes[nodeData.meta].name %> <%= nodes[nodeData.meta].id %> <%= nodes[nodeData.meta].guid %>\n    <%} else {%>\n      // FCO\n      GMENode(\"<%= nodeData.id %>\", \"\")<%=formula.lineEnding%>\n    <%}%>\n\n    <% if (nodeData.parent!=null) { %>\n    GMEParent(\"<%= nodeData.id %>\", \"<%= nodeData.parent %>\")<%=formula.lineEnding%>\n    <%}%>\n\n    <% if (nodeData.isAbstract) { %>\n      GMEAbstract(\"<%= nodeData.id %>\", <%=formula.true%>)<%=formula.lineEnding%>\n    <% } else { %>\n      GMEAbstract(\"<%= nodeData.id %>\", <%=formula.false%>)<%=formula.lineEnding%>\n    <%}%>\n    <% if (nodeData.jsonMeta.children.items.length > 0) { %>\n      // valid children constraint: min: <%= nodeData.jsonMeta.children.min %> max: <%= nodeData.jsonMeta.children.max %>\n      <%\n      for (j = 0; j < nodeData.jsonMeta.children.items.length; j += 1) {%>\n        // valid child: <%= nodeData.jsonMeta.children.items[j] %> min: <%= nodeData.jsonMeta.children.minItems[j] %> max: <%= nodeData.jsonMeta.children.maxItems[j] %>\n      <%}%>\n    <%}%>\n    <%\n    var attribute, attributeNames = Object.keys(nodeData.jsonMeta.attributes);\n    for (j = 0; j < attributeNames.length; j += 1) {\n      attribute = nodeData.jsonMeta.attributes[attributeNames[j]];%>\n      GMEAttribute(\"<%= attributeNames[j] %>\", \"<%= nodeData.attributes[attributeNames[j]] %>\", \"<%= nodeData.id %>\")<%=formula.lineEnding%>\n      // attribute: <%= attributeNames[j] %> <%= attribute.type %> <%= nodeData.attributes[attributeNames[j]] %>\n    <%}%>\n    <%\n    var pointer, pointerNames = Object.keys(nodeData.jsonMeta.pointers);\n    for (j = 0; j < pointerNames.length; j += 1) {\n      pointer = nodeData.jsonMeta.pointers[pointerNames[j]];%>\n      GMEPointer(\"<%= pointerNames[j] %>\", \"<%= pointer.items %>\", \"<%= nodeData.id %>\")<%=formula.lineEnding%>\n      // pointer name: <%= pointerNames[j] %> type: <%= pointer.items %> <%= nodeData.pointers[pointerNames[j]] %>\n    <%}%>\n  <%}%>\n}\n"
}});