// Project name: <%= projectName %>
// Version     : <%= hash %>

domain WebGME
{
  ///////////////////////
  // WebGME primitives //
  ///////////////////////

<% if (formulaVersion === '1') { %>
  primitive GMENode      ::= (id: String, base: String).
  primitive GMEAttribute ::= (name:String, value:String, nodeId:String).
  primitive GMEParent    ::= (childId: String, parentId: String).
  primitive GMEAbstract  ::= (nodeId:String, value:Boolean).
  primitive GMEPointer   ::= (name:String, pointsToId:String, nodeId:String).
  primitive GMEIsMetaType::= (nodeId:String, value:Boolean).

  primitive Debug ::= (String, String).
<% } else if (formulaVersion === '2') { %>
  GMENode      ::= new (id: String, base: String).
  GMEAttribute ::= new (name:String, value:String, nodeId:String).
  GMEParent    ::= new (childId: String, parentId: String).
  GMEAbstract  ::= new (nodeId:String, value:Boolean).
  GMEPointer   ::= new (name:String, pointsToId:String, nodeId:String).
  GMEIsMetaType    ::= new (nodeId:String, value:Boolean).

  Debug ::= new (String, String).
<% } %>

  ////////////////
  // WebGME API //
  ////////////////

  // Inheritance
  Base ::= (child:GMENode, base:GMENode).
  Base(child, base) :-   child is GMENode(childId, baseId)
                       , base is GMENode(baseId, _)
                       .

  // InheritanceTree
  InheritanceTree ::= (child: GMENode, parent: GMENode).
  InheritanceTree(child, parent) :-   Base(child, parent)
                                    ; InheritanceTree(child, x)
                                    , InheritanceTree(x, parent)
                                    .

  // Containment - Contained relationship
  Parent ::= (childNode: GMENode, parentNode: GMENode).
  Parent(childNode, parentNode) :-   GMEParent(childId, parentId)
                                   , childNode is GMENode(childId, _)
                                   , parentNode is GMENode(parentId, _)
                                   .

  // ContainmentTree
  ContainmentTree ::= (child: GMENode, parent:GMENode).
  ContainmentTree(child, parent) :-   Parent(child, parent)
                                    ; ContainmentTree(child, x)
                                    , ContainmentTree(x, parent)
                                    .

  // Abstract
  IsAbstract ::= (GMENode, Boolean).
  IsAbstract(node, value) :-   GMEAbstract(nodeId, value)
                             , node is GMENode(nodeId, _)
                             .

   // IsMetaType
   IsMetaType ::= (GMENode, Boolean).
   IsMetaType(node, value) :-   GMEIsMetaType(nodeId, value)
                              , node is GMENode(nodeId, _)
                              .

  // Connections
  Connections ::= (GMENode).
  Connections(n) :-   n is GMENode
                    , Pointer("src", _, n)
                    , Pointer("dst", _, n)
                    .


  // Attributes and Pointers
  Attribute ::= (name:String, value:String, node:GMENode).
  Attribute(name, value, node) :-   GMEAttribute(name, value, nodeId)
                                  , node is GMENode(nodeId, _)
                                  .

  Pointer ::= (name:String, pointsTo:GMENode, node:GMENode).
  Pointer(name, pointsTo, node) :-   GMEPointer(name, pointsToId, nodeId)
                                   , node is GMENode(nodeId, _)
                                   , pointsTo is GMENode(pointsToId, _)
                                   .

  // Basic functions: Getters
  GetName ::= (name:String, node:GMENode).
  GetName(name, node) :- Attribute("name", name, node).

  GetNode ::= (id:String, node:GMENode).
  GetNode(id, node) :- node is GMENode(id, _).

  GetSrcNode ::= (srcNode: GMENode, connectionNode: GMENode).
  GetSrcNode(srcNode, connNode) :-   Connections(connNode)
                                   , Pointer("src", srcNode, connNode)
                                   .

  GetDstNode ::= (dstNode: GMENode, connectionNode: GMENode).
  GetDstNode(dstNode, connNode) :-   Connections(connNode)
                                   , Pointer("dst", dstNode, connNode)
                                   .
}

<% if (formulaVersion === '1') { %>
transform T from in1::WebGME to out1::WebGME
{
  /*out1.Debug(cr_name, cr_id) :-
                                metaDfId = "/1329246314/808227394/1194191410"
                              , appNode = in1.GMENode("/817592481/G/n", _)

                              , cr_name="credit_identity"

                              , metaDfNode = in1.GMENode(metaDfId, _)
                              , in1.InheritanceTree(child, metaDfNode)
                              , in1.ContainmentTree(child, appNode)
                              , child is in1.GMENode(cr_id, _)
                              , in1.Attribute("name", cr_name, child)
                              .*/
  out1.Debug("abstract", name) :- in1.IsAbstract(node, <%=formula.true%>), in1.GetName(name, node).
}
<% } else if (formulaVersion === '2') { %>
transform T (in1::WebGME) returns (out1::WebGME)
{
  //out1.Debug("abstract", name) :- in1.IsAbstract(node, <%=formula.true%>), in1.GetName(name, node).
  out1.Debug(name, metaName) :- in1.GetName(metaName, metaNode)
                            , in1.GetName(name, node)
                            , in1.InheritanceTree(node, metaNode)
                            .
}

transform T2 (in1::WebGME) returns (out1::WebGME)
{
  out1.Debug("src", srcId) :- in1.GetNode("/817592481/w/k/V", cNode)
                            , in1.GetSrcNode(srcNode, cNode)
                            , in1.GetNode(srcId, srcNode)
                            .
  out1.Debug("dst", dstId) :- in1.GetNode("/817592481/w/k/V", cNode)
                            , in1.GetDstNode(dstNode, cNode)
                            , in1.GetNode(dstId, dstNode)
                            .
}

transform TMetaTypes (in1::WebGME) returns (out1::WebGME)
{
  out1.Debug(nodeId, name) :- in1.GetNode(nodeId, node)
                            , in1.IsMetaType(node, TRUE)
                            , in1.GetName(name, node)
                            .
}

transform TInstanceModels (in1::WebGME) returns (out1::WebGME)
{
  out1.Debug(name, metaName) :- in1.IsMetaType(node, FALSE)
                            , in1.GetName(name, node)
                            , in1.InheritanceTree(node, metaNode)
                            , in1.IsMetaType(metaNode, TRUE)
                            , in1.GetName(metaName, metaNode)
                            .
}

transform TInstancesOfType (in1::WebGME) returns (out1::WebGME)
{
  out1.Debug(name, nodeId) :- in1.IsMetaType(node, FALSE)
                            , in1.GetName(name, node)
                            , in1.GetNode(nodeId, node)
                            , in1.InheritanceTree(node, metaNode)
                            , in1.IsMetaType(metaNode, TRUE)
                            , in1.GetName("Center", metaNode)
                            .
}
<% } %>




model m of WebGME
{
  <%
  var nodeData, i, j, keys = Object.keys(nodes);
  for (i = 0; i < keys.length; i += 1) {
      nodeData = nodes[keys[i]];%>
  // <%= nodeData.name %>
  // <%= nodeData.id %>
  // <%= nodeData.guid %>

    <% if (nodeData.base) { %>
      GMENode("<%= nodeData.id %>", "<%= nodes[nodeData.base].id %>")<%=formula.lineEnding%>
  // base is <%= nodes[nodeData.base].name %> <%= nodes[nodeData.base].id %> <%= nodes[nodeData.base].guid %>
  // meta is <%= nodes[nodeData.meta].name %> <%= nodes[nodeData.meta].id %> <%= nodes[nodeData.meta].guid %>
    <%} else {%>
      // FCO
      GMENode("<%= nodeData.id %>", "")<%=formula.lineEnding%>
    <%}%>

    <% if (nodeData.parent!=null) { %>
    GMEParent("<%= nodeData.id %>", "<%= nodeData.parent %>")<%=formula.lineEnding%>
    <%}%>

    <% if (nodeData.isAbstract) { %>
      GMEAbstract("<%= nodeData.id %>", <%=formula.true%>)<%=formula.lineEnding%>
    <% } else { %>
      GMEAbstract("<%= nodeData.id %>", <%=formula.false%>)<%=formula.lineEnding%>
    <%}%>
    <% if (nodeData.isMetaType) { %>
      GMEIsMetaType("<%= nodeData.id %>", <%=formula.true%>)<%=formula.lineEnding%>
    <% } else { %>
      GMEIsMetaType("<%= nodeData.id %>", <%=formula.false%>)<%=formula.lineEnding%>
    <%}%>
    <% if (nodeData.jsonMeta.children.items.length > 0) { %>
      // valid children constraint: min: <%= nodeData.jsonMeta.children.min %> max: <%= nodeData.jsonMeta.children.max %>
      <%
      for (j = 0; j < nodeData.jsonMeta.children.items.length; j += 1) {%>
        // valid child: <%= nodeData.jsonMeta.children.items[j] %> min: <%= nodeData.jsonMeta.children.minItems[j] %> max: <%= nodeData.jsonMeta.children.maxItems[j] %>
      <%}%>
    <%}%>
    <%
    var attribute, attributeNames = Object.keys(nodeData.jsonMeta.attributes);
    for (j = 0; j < attributeNames.length; j += 1) {
      attribute = nodeData.jsonMeta.attributes[attributeNames[j]];%>
      GMEAttribute("<%= attributeNames[j] %>", "<%= nodeData.attributes[attributeNames[j]] %>", "<%= nodeData.id %>")<%=formula.lineEnding%>
      // attribute: <%= attributeNames[j] %> <%= attribute.type %> <%= nodeData.attributes[attributeNames[j]] %>
    <%}%>
    <%
    var pointer, pointerNames = Object.keys(nodeData.jsonMeta.pointers);
    for (j = 0; j < pointerNames.length; j += 1) {
      pointer = nodeData.jsonMeta.pointers[pointerNames[j]];%>
      GMEPointer("<%= pointerNames[j] %>", "<%= nodeData.pointers[pointerNames[j]] %>", "<%= nodeData.id %>")<%=formula.lineEnding%>
      // pointer name: <%= pointerNames[j] %> type: <%= pointer.items %> <%= nodeData.pointers[pointerNames[j]] %>
    <%}%>
  <%}%>
}
